#nullable enable


using System.Data;
using System.Text.Json;
using Dapper;
using Microsoft.Extensions.Configuration;
using Npgsql;
using Vraith.Gisaxs.Utility.Database;

namespace Vraith.Gisaxs.Core.JobStore
{
    public record JobInfoDto(int Id, JobInfo JobInfo);

    public class JobInfo
    {
        public IReadOnlyCollection<string> History { get; }
        public string Body { get; }

        public JobInfo(IReadOnlyCollection<string> history, string body)
        {
            History = history;
            Body = body;
        }
    }

    public class Job
    {
        public JobInfo Info { get; }
        public long UserId { get; }

        public Job(JobInfo info, long userId)
        {
            Info = info;
            UserId = userId;
        }
    }

    public class JobStore
    {
        private readonly string _connectionString;

        public JobStore(IConfiguration configuration, string connectionId = "Default")
        {
            _connectionString = configuration.GetConnectionString(connectionId) ??
                                throw new ArgumentNullException(nameof(connectionId));
            using IDbConnection connection = new NpgsqlConnection(_connectionString);
            connection.Execute(
                @"CREATE TABLE IF NOT EXISTS jobs (
                    Id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    UserId INT NOT NULL,
                    Info JSONB NOT NULL,
                    Result JSONB); "
            );
        }

        public async Task<IEnumerable<JobInfoDto>> Get()
        {
            using IDbConnection connection = new NpgsqlConnection(_connectionString);
            return await connection.QueryAsync(@"SELECT info, id FROM jobs",
                (string info, int id) => { return new JobInfoDto(id, JsonSerializer.Deserialize<JobInfo>(info)!); });
        }

        public async Task<Job?> Get(long id)
        {
            using IDbConnection connection = new NpgsqlConnection(_connectionString);
            IEnumerable<Job>? jobsEnumerator = await connection.QueryAsync(
                @$"SELECT info, userid as id FROM jobs WHERE id = {id}",
                (string info, int userId) => { return new Job(JsonSerializer.Deserialize<JobInfo>(info)!, userId); });
            if (jobsEnumerator == null)
            {
                return null;
            }

            var jobs = jobsEnumerator.ToArray();

            if (jobs.Length != 1)
            {
                return null;
            }

            return jobs[0];
        }

        public async void Delete(long id)
        {
            using IDbConnection connection = new NpgsqlConnection(_connectionString);
            await connection.ExecuteAsync($@"DELETE * FROM jobs WHERE id = {id}");
        }

        public async void Insert(Job job)
        {
            using IDbConnection connection = new NpgsqlConnection(_connectionString);
            await connection.ExecuteAsync($@"
                    INSERT INTO jobs (info, userid)
                    VALUES (@info, @userid)",
                new { info = new JsonParameter(JsonSerializer.Serialize(job.Info)), job.UserId });
        }

        public async void Insert(IReadOnlyCollection<Job> jobs)
        {
            using IDbConnection connection = new NpgsqlConnection(_connectionString);
            using IDbTransaction transaction = connection.BeginTransaction();
            foreach (var job in jobs)
            {
                await connection.ExecuteAsync($@"
                    INSERT INTO jobs (info, userid)
                    VALUES (@info, @userid)",
                    new { info = new JsonParameter(JsonSerializer.Serialize(job.Info)), userid = job.UserId },
                    transaction);
            }

            transaction.Commit();
        }
    }
}