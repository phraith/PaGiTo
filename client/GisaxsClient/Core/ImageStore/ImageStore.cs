using Dapper;
using Npgsql;
using System.Data;

#nullable enable

namespace GisaxsClient.Core.ImageStore
{
    public class ImageStore
    {
        private readonly string connectionString;
        public ImageStore(IConfiguration configuration, string connectionId = "Default")
        {
            connectionString = configuration.GetConnectionString(connectionId);
            using IDbConnection connection = new NpgsqlConnection(connectionString);
            connection.Execute(
                @$"CREATE TABLE IF NOT EXISTS images (
                    Id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    Name VARCHAR(50) NOT NULL,
                    Size BIGINT NOT NULL,
                    Width INT NOT NULL,
                    Height INT NOT NULL,
                    Data double precision[] NOT NULL); "
                );
        }

        public async Task<IEnumerable<ImageInfo>> Get()
        {
            using IDbConnection connection = new NpgsqlConnection(connectionString);
            return await connection.QueryAsync<ImageInfo>(@"SELECT Id, Name, Size, Width, Height FROM images");
        }

        public async Task<Image?> Get(long id)
        {
            using IDbConnection connection = new NpgsqlConnection(connectionString);
            var images = await connection.QueryAsync<Image>(@$"SELECT * FROM images WHERE Id = {id}");
            if (images.Count() != 1) { return null; }
            return images.First();
        }

        public async void Delete(long id)
        {
            using IDbConnection connection = new NpgsqlConnection(connectionString);
            await connection.ExecuteAsync($@"DELETE * FROM images WHERE Id = {id}");
        }

        public async void Insert(Image image)
        {
            if (image.Data == null) { return; }

            using IDbConnection connection = new NpgsqlConnection(connectionString);
            await connection.ExecuteAsync($@"
                    INSERT INTO images (name, size, data, width, height)
                    VALUES (@name, @size, @data, @width, @height)", new { name = image.Name, size = image.Size, data = image.Data, width = image.Width, height = image.Height });
        }

        public async void Insert(IReadOnlyCollection<Image> images)
        {
            using IDbConnection connection = new NpgsqlConnection(connectionString);
            using IDbTransaction transaction = connection.BeginTransaction();
            foreach (var image in images)
            {
                await connection.ExecuteAsync($@"
                        INSERT INTO images (name, size, data, width, height)
                    VALUES (@name, @size, @data, @width, @height)", new { name = image.Name, size = image.Size, data = image.Data, width = image.Width, height = image.Height }, transaction);
            }
            transaction.Commit();
        }
    }
}
