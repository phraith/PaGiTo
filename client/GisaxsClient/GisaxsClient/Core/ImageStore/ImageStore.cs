using Dapper;
using GisaxsClient.Utility.Database;
using ImageStoreClient.ImageUtility;
using Npgsql;
using System.Data;
using System.Text.Json;
using static Dapper.SqlMapper;

#nullable enable

namespace GisaxsClient.Core.ImageStore
{
    public class ImageStore
    {
        private readonly string connectionString;
        public ImageStore(IConfiguration configuration, string connectionId = "Default")
        {
            connectionString = configuration.GetConnectionString(connectionId);
            using IDbConnection connection = new NpgsqlConnection(connectionString);
            connection.Execute(
                @$"CREATE TABLE IF NOT EXISTS images (
                    Id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    Info JSONB NOT NULL,
                    Data double precision[] NOT NULL); "
                );
        }

        public async Task<IEnumerable<ImageInfoDto>> Get()
        {
            using IDbConnection connection = new NpgsqlConnection(connectionString);
            return await connection.QueryAsync(@"SELECT info, id FROM images", (string info, int id) => { return new ImageInfoDto(id, JsonSerializer.Deserialize<ImageInfo>(info)!); });
        }

        public async Task<Image?> Get(long id)
        {
            using IDbConnection connection = new NpgsqlConnection(connectionString);
            var images = await connection.QueryAsync(@$"SELECT info, data as id FROM images WHERE id = {id}", (string info, double[] data) =>
            {
                return new Image(JsonSerializer.Deserialize<ImageInfo>(info)!, data);
            });
            if (images.Count() != 1) { return null; }
            return images.First();
        }

        public async void Delete(long id)
        {
            using IDbConnection connection = new NpgsqlConnection(connectionString);
            await connection.ExecuteAsync($@"DELETE * FROM images WHERE id = {id}");
        }

        public async void Insert(Image image)
        {
            if (image.Data == null) { return; }

            using IDbConnection connection = new NpgsqlConnection(connectionString);
            await connection.ExecuteAsync($@"
                    INSERT INTO images (info, data)
                    VALUES (@info, @data)", new { info = new JsonParameter(JsonSerializer.Serialize(image.Info)), data = image.Data });
        }

        public async void Insert(IReadOnlyCollection<Image> images)
        {
            using IDbConnection connection = new NpgsqlConnection(connectionString);
            using IDbTransaction transaction = connection.BeginTransaction();
            foreach (var image in images)
            {
                await connection.ExecuteAsync($@"
                        INSERT INTO images (info, data)
                    VALUES (@info, @data)", new { info = new JsonParameter(JsonSerializer.Serialize(image.Info)), data = image.Data }, transaction);
            }
            transaction.Commit();
        }
    }
}
