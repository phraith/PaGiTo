using System.Data;
using System.Text.Json;
using Dapper;
using ParallelGisaxsToolkit.Gisaxs.Utility.Database;

namespace ParallelGisaxsToolkit.Gisaxs.Core.JobStore
{
    public record JobInfoWithId(int Id, JobInfo JobInfo);

    public record JobInfo(string Config);

    public record Job(JobInfo Info, string? Result, string UserId)
    {
        public static readonly Job Empty = new Job(new JobInfo(string.Empty), string.Empty, string.Empty);
    }


    public class JobStore : IJobStore
    {
        private readonly IDbConnection _dbConnection;

        public JobStore(IDbConnection dbConnection)
        {
            _dbConnection = dbConnection;
            _dbConnection.Execute(
                @"CREATE TABLE IF NOT EXISTS jobs (
                    Id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    UserId TEXT NOT NULL,
                    Info JSONB NOT NULL,
                    Result JSONB); "
            );
        }

        public async Task<IEnumerable<JobInfoWithId>> Get()
        {
            return await _dbConnection.QueryAsync(@"SELECT info, id FROM jobs order by id asc",
                (string info, int id) => new JobInfoWithId(id, JsonSerializer.Deserialize<JobInfo>(info)!));
        }

        public async Task<Job?> Get(long id)
        {
            IEnumerable<Job>? jobsEnumerator = await _dbConnection.QueryAsync(
                @$"SELECT info, result, userid as id FROM jobs WHERE id = {id}",
                (string info, string? result, string userId) =>
                    new Job(JsonSerializer.Deserialize<JobInfo>(info)!, result, userId));
            if (jobsEnumerator == null)
            {
                return null;
            }

            Job[]? jobs = jobsEnumerator.ToArray();

            if (jobs.Length != 1)
            {
                return null;
            }

            return jobs[0];
        }

        public async Task Delete(long id)
        {
            await _dbConnection.ExecuteAsync($@"DELETE * FROM jobs WHERE id = {id}");
        }

        public async Task Insert(Job job)
        {
            await _dbConnection.ExecuteAsync($@"
                    INSERT INTO jobs (info, userid)
                    VALUES (@info, @userid)",
                new { info = new JsonParameter(JsonSerializer.Serialize(job.Info)), job.UserId });
        }

        public async Task Insert(IReadOnlyCollection<Job> jobs)
        {
            using IDbTransaction transaction = _dbConnection.BeginTransaction();
            foreach (var job in jobs)
            {
                await _dbConnection.ExecuteAsync($@"
                    INSERT INTO jobs (info, userid)
                    VALUES (@info, @userid)",
                    new { info = new JsonParameter(JsonSerializer.Serialize(job.Info)), userid = job.UserId },
                    transaction);
            }

            transaction.Commit();
        }
    }
}