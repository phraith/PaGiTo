using System.Data;
using Dapper;
using Npgsql;
using ParallelGisaxsToolkit.Gisaxs.Utility.Database;

namespace ParallelGisaxsToolkit.Gisaxs.Core.JobStore
{
    public record Job(string JobId, string UserId, DateTime IssueDate, DateTime? FinishDate = null,
        string? Result = null, string? Config = null)
    {
        public Job()
            : this(string.Empty, string.Empty, DateTime.MinValue, null, null, null)
        {
        }
    }


    public class JobStore : IJobStore
    {
        private readonly IDbConnection _dbConnection;

        public JobStore(IDbConnection dbConnection)
        {
            _dbConnection = dbConnection;
            _dbConnection.Execute(
                @"CREATE TABLE IF NOT EXISTS jobs (
                    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    jobId TEXT NOT NULL,
                    userId TEXT NOT NULL,
                    config JSONB NOT NULL,
                    issueDate TIMESTAMP NOT NULL,
                    result TEXT NULL,
                    finishDate TIMESTAMP NULL
                    ); "
            );
        }

        public async Task Update(Job job)
        {
            var parameters = new
            {
                job.UserId, job.JobId, job.FinishDate, job.Result
            };

            const string updateFinishDate = @"UPDATE jobs set finishDate = @FinishDate where jobId = @JobId";
            await _dbConnection.ExecuteAsync(updateFinishDate, parameters);

            const string updateResult = @"UPDATE jobs set result = @Result where jobId = @JobId";
            await _dbConnection.ExecuteAsync(updateResult, parameters);
        }


        public async Task<IEnumerable<Job>> Get()
        {
            const string sql =
                @"select jobId, userId, issueDate, finishDate  from jobs where jsonb_path_exists(config, '$ ? ($.meta.type like_regex ""fitting"")')";
            IEnumerable<Job>? res = await _dbConnection.QueryAsync<Job>(sql);
            return res;
        }

        public async Task<IEnumerable<long>> Count()
        {
            const string sql =
                @"select count(distinct id) from jobs where jsonb_path_exists(config, '$ ? ($.meta.type like_regex ""fitting"")')";
            return await _dbConnection.QueryAsync<long>(sql);
        }

        public async Task<Job?> Get(string jobId, string userId, bool includeConfig, bool includeResult)
        {
            var parameters = new { JobId = jobId, UserId = userId };
            string sql = CreateSql(includeConfig, includeResult);
            Job[] jobResult = (await _dbConnection.QueryAsync<Job>(sql, parameters)).ToArray();
            return jobResult.Length != 1 ? null : jobResult[0];
        }

        private static string CreateSql(bool includeConfig, bool includeResult)
        {
            if (includeConfig && includeResult)
            {
                return
                    @"select config, jobId, userId, issueDate, finishDate, result from jobs where jobId = @JobId and userId = @UserId";
            }

            if (includeConfig)
            {
                return
                    @"select config, jobId, userId, issueDate, finishDate from jobs where jobId = @JobId and userId = @UserId";
            }

            if (includeResult)
            {
                return
                    @"select jobId, userId, issueDate, finishDate, result from jobs where jobId = @JobId and userId = @UserId";
            }

            return @"select jobId, userId, issueDate, finishDate from jobs where jobId = @JobId and userId = @UserId";
        }

        public async Task Delete(long jobId)
        {
            var parameters = new { JobId = jobId };
            const string sql = @$"DELETE FROM jobs WHERE jobId = @JobId";
            await _dbConnection.ExecuteAsync(sql, parameters);
        }

        public async Task Insert(Job job)
        {
            if (job.FinishDate == null && job.Result == null)
            {
                var parameters2 = new
                    { job.UserId, job.JobId, Config = new JsonParameter(job.Config), job.IssueDate };
                const string sql2 = $@"INSERT INTO jobs (userId, jobId, config, issueDate) VALUES (@UserId, @JobId, @Config, @IssueDate)";
                await _dbConnection.ExecuteAsync(sql2, parameters2);
            }
            else
            {
                var parameters = new
                    { job.UserId, job.JobId, Config = new JsonParameter(job.Config), job.IssueDate, job.FinishDate, Result = new JsonParameter(job.Result) };
                const string sql =
                    @"INSERT INTO jobs (userId, jobId, config, issueDate, finishDate, result) VALUES (@UserId, @JobId, @Config, @IssueDate, @FinishDate, @Result)";
                await _dbConnection.ExecuteAsync(sql, parameters);
            }
        }
    }
}