using System.Data;
using System.Text.Json;
using Dapper;
using ParallelGisaxsToolkit.Gisaxs.Utility.Database;

namespace ParallelGisaxsToolkit.Gisaxs.Core.JobStore
{
    public record Job(string Config, string JobId, string UserId);

    public class JobStore : IJobStore
    {
        private readonly IDbConnection _dbConnection;

        public JobStore(IDbConnection dbConnection)
        {
            _dbConnection = dbConnection;
            _dbConnection.Execute(
                @"CREATE TABLE IF NOT EXISTS jobs (
                    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    jobId TEXT NOT NULL,
                    userId TEXT NOT NULL,
                    config JSONB NOT NULL); "
            );
        }

        public async Task<IEnumerable<Job>> Get()
        {
            const string sql = @"SELECT Config, JobId, UserId FROM jobs";
            return await _dbConnection.QueryAsync<Job>(sql);
        }

        public async Task<Job?> Get(long jobId)
        {
            var parameters = new { JobId = jobId };
            const string sql = @$"SELECT config, jobId, userId FROM jobs WHERE jobId = @JobId";
            IEnumerable<Job>? jobsEnumerator = await _dbConnection.QueryAsync<Job>(sql, parameters);

            Job[]? jobs = jobsEnumerator?.ToArray();
            return jobs?.Length == 1 ? jobs[0] : null;
        }

        public async Task Delete(long jobId)
        {
            var parameters = new { JobId = jobId };
            const string sql = @$"DELETE FROM jobs WHERE jobId = @JobId";
            await _dbConnection.ExecuteAsync(sql, parameters);
        }

        public async Task Insert(Job job)
        {
            var parameters = new
                { job.UserId, job.JobId, Config = new JsonParameter(JsonSerializer.Serialize(job.Config)) };
            const string sql = $@"INSERT INTO jobs (userId, jobId, config) VALUES (@UserId, @JobId, @Config)";
            await _dbConnection.ExecuteAsync(sql, parameters);
        }

        public async Task Insert(IReadOnlyCollection<Job> jobs)
        {
            using IDbTransaction transaction = _dbConnection.BeginTransaction();
            const string sql = $@"INSERT INTO jobs (userId, jobId, config) VALUES (@UserId, @JobId, @Config)";
            foreach (Job job in jobs)
            {
                var parameters = new
                    { job.UserId, job.JobId, Config = new JsonParameter(JsonSerializer.Serialize(job.Config)) };
                await _dbConnection.ExecuteAsync(sql, parameters, transaction);
            }

            transaction.Commit();
        }
    }
}