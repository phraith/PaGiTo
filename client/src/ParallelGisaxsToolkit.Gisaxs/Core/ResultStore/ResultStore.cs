using System.Data;
using Dapper;
using ParallelGisaxsToolkit.Gisaxs.Utility.Database;

namespace ParallelGisaxsToolkit.Gisaxs.Core.ResultStore
{
    public record Result(string Data, string JobId, string UserId);

    public class ResultStore : IResultStore
    {
        private readonly IDbConnection _connection;

        public ResultStore(IDbConnection connection)
        {
            _connection = connection;
            connection.Execute(
                @"CREATE TABLE IF NOT EXISTS results (
                    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                    userId Text NOT NULL,
                    jobId TEXT NOT NULL,
                    data JSONB NOT NULL);"
            );
        }

        public async Task<IEnumerable<Result>> Get()
        {
            return await _connection.QueryAsync(@"SELECT Data, JobId, UserId, Id FROM results",
                (Result result, int _) => result);
        }

        public async Task<Result?> Get(string jobId)
        {
            var parameters = new { JobId = jobId };
            const string sql = "SELECT data, jobId, userId FROM results WHERE jobId = @JobId";
            IEnumerable<Result>? jobsEnumerator = await _connection.QueryAsync<Result>(sql, param: parameters);
            Result[]? results = jobsEnumerator?.ToArray();
            return results?.Length == 1 ? results[0] : null;
        }

        public async Task Delete(long id)
        {
            await _connection.ExecuteAsync($@"DELETE FROM results WHERE id = {id}");
        }

        public async Task Insert(Result result)
        {
            var parameters = new { result.UserId, result.JobId, Data = new JsonParameter(result.Data) };
            const string sql = $@"INSERT INTO results (userId, jobId, data) VALUES (@UserId, @JobId, @Data)";
            await _connection.ExecuteAsync(sql, param: parameters);
        }

        public async Task Insert(IReadOnlyList<Result> results)
        {
            using IDbTransaction transaction = _connection.BeginTransaction();
            const string sql = $@"INSERT INTO results (userId, jobId, data) VALUES (@UserId, @JobId, @Data)";
            foreach (Result result in results)
            {
                var parameters = new { result.UserId, result.JobId, Data = new JsonParameter(result.Data) };
                await _connection.ExecuteAsync(sql, param: parameters, transaction);
            }

            transaction.Commit();
        }
    }
}