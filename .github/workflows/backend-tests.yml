name: Gisaxs Backend Tests

on:
  release:
  push:
jobs:
  test:
    name: Run test suite
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: docker-compose.yml
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASS: ${{ secrets.DOCKER_PASS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build docker images
        run: docker-compose build backend_tests

      - name: Run tests
        run: docker-compose run backend_tests

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Backend Tests
          path: "/reports/backend/test-results.xml"
          reporter: java-junit

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          # or
          # api-token: ${{ secrets.CODACY_API_TOKEN }}
          coverage-reports: /reports/backend/GisaxsCoverage.xml
          # coverage-reports: <PATH_TO_REPORT>, <PATH_TO_REPORT>
  publish:
    needs: test
    if: github.event_name == 'release'
    name: publish
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: docker-compose.yml
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
      IMAGE_TAG: ${{ github.head_ref || github.ref_name }} 
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{secrets.REGISTRY}}
          username: ${{secrets.DOCKER_USER}}
          password: ${{secrets.DOCKER_TOKEN}}

      - name: Build and push backend docker image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile.alpine
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{secrets.REGISTRY}}/${{secrets.REPO_NAME}}/backend:latest, ${{secrets.REGISTRY}}/${{secrets.REPO_NAME}}/backend:${{env.IMAGE_TAG}}

