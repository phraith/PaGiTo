version: "3.3"

services:
  traefik:
    image: "traefik:latest"
    container_name: "traefik"
    profiles:
     - "backbone"
    command:
      - "--log.level=DEBUG"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--api" 
      - "--providers.docker"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - type: bind
        source: ./letsencrypt
        target: /letsencrypt
    networks:
      - proxynet
    labels:
      # Dashboard
      - "traefik.http.routers.traefik.rule=Host(`traefik.wavecomputing.xyz`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=user:$$apr1$$q8eZFHjF$$Fvmkk//V6Btlaf2i/ju5n/"
      
      # global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
  registry:
    restart: always
    image: registry:2
    expose:
    - "5000"
    profiles:
     - "backbone"
    networks:
      - proxynet
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.registry-internal.entrypoints=websecure"
      - "traefik.http.services.registry-internal.loadbalancer.server.port=5000"
      - "traefik.http.routers.registry-internal.rule=Host(`registry-internal.wavecomputing.xyz`)"
      - "traefik.http.routers.registry-internal.tls.certresolver=myresolver"
    volumes:
      - ./registry/auth:/auth 
      - ./registry/data:/data
      - ./registry/config.yml:/etc/docker/registry/config.yml:ro
  registry-ui:
    # restart: always
    image: joxit/docker-registry-ui:latest
    environment:
        - DELETE_IMAGES=true
        - REGISTRY_TITLE=My Private Docker Registry
        - NGINX_PROXY_PASS_URL=http://registry:5000
        - SINGLE_REGISTRY=true
    profiles:
     - "backbone"
    networks:
      - proxynet
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.registry.entrypoints=websecure"
      - "traefik.http.routers.registry.rule=Host(`registry.wavecomputing.xyz`)"
      - "traefik.http.routers.registry.tls.certresolver=myresolver"
  redis:
    image: redis:latest
    profiles:
     - "gisaxsapp"
    expose:
      - 6379
    networks:
      - proxynet
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
  pg_admin4:
    image: dpage/pgadmin4:latest
    profiles:
     - "gisaxsapp"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    networks:
      - proxynet
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.db.entrypoints=websecure"
      - "traefik.http.routers.db.rule=Host(`db.wavecomputing.xyz`)"
      - "traefik.http.routers.db.tls.certresolver=myresolver"
  postgres:
    image: postgres:latest
    profiles:
     - "gisaxsapp"
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: base
    expose:
      - '5432'
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - proxynet
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d base'"]
      interval: 10s
      timeout: 3s
      retries: 3
  gisaxs-client:
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      GISAXS_BACKEND: ${GISAXS_BACKEND}
      RABBIT_MQ: ${RABBIT_MQ}
      REDIS_URL: ${REDIS_URL}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AUTH_TOKEN: ${AUTH_TOKEN}
    image: registry-internal.wavecomputing.xyz/gisaxs/client:0.0.12
    profiles:
     - "gisaxsapp"
    labels:
     - "traefik.enable=true"
     - "traefik.http.routers.client.entrypoints=websecure"
     - "traefik.http.routers.client.rule=Host(`wavecomputing.xyz`)"
     - "traefik.http.routers.client.tls.certresolver=myresolver"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - proxynet
  rabbitmq:
    environment:
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    image: rabbitmq:3-management
    profiles:
     - "gisaxsapp"
    expose:
      - 5672
      - 15672
    networks:
      - proxynet
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
  gisaxs-backend:
    environment:
      RABBITMQ_HOST: ${RABBIT_MQ}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    image: "registry-internal.wavecomputing.xyz/gisaxs/backend:0.0.12"
    entrypoint: ["./apps/ModelingFramework/ModelingFramework"]
    profiles:
     - "gisaxsapp"
    expose:
      - 5555
    networks:
      - proxynet
    depends_on:
      rabbitmq:
        condition: service_healthy
networks:
  proxynet:
    name: custom_network
volumes:
  db:
    driver: local
